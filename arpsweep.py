#
# Lleva a cabo una revision de los equipos 1 a 254 de la red recibida como argumento.
# Muestra como resultado la lista de IP's de los equipos detectados como activos.
# Para descubrir los equipos activos se hace uso de paquetes ARP.
#
# Autor: Jose Luis Torres Rodriguez
#
#! /usr/bin/env python

import sys
import re
from optparse import OptionParser

usage = "Muestra los equipos activos (1 a 254) de la red indicada.\nForma de uso: %prog [opciones] red-address. Ej. %prog -m 24 192.168.1.0"
parser = OptionParser(usage=usage)
parser.add_option("-m", "--masc", type="int", action="store", dest="masc", default=24,
                  help="mascara de red. Default = 24")

# Procesamos los argumentos
(options, args) = parser.parse_args()
if len(sys.argv) < 2:
    print r"Error: faltan argumentos"
    parser.print_help()
    sys.exit(1)
if len(sys.argv) == 2:
    ip = sys.argv[1]
else:
    if len(sys.argv) == 4:
        ip = sys.argv[3]
    else:
        print r"Error en los argumentos"
        parser.print_help()
        sys.exit(1)

# Validamos la IP
if not [0<=int(x)<256 for x in re.split('\.',re.match(r'^\d+\.\d+\.\d+\.\d+$', ip).group(0))].count(True)==4:
    print r"Direccion IP invalida"
    sys.exit(1)

# ip/mascara
ipMasc = ip+"/"+str(options.masc)

# Eliminamos el Warning de IP v6
import logging
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

# intentamos cargar las funciones de scapy
try:
    from scapy.all import srp,Ether,ARP,conf
except ImportError:
    print r"Se requiere el modulo scapy"
    sys.exit(1)

# Deshabilitamos el modo verbose
conf.verb=0

# Enviamos el paquete ARP a toda la red y guardamos los resultados
print r"Revisando ..."
ans,unans=srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=ipMasc),timeout=2)

print r"Equipos activos"
# Mostramos las IP's obtenidas
for snd,rcv in ans:
    print rcv.sprintf(r"%ARP.psrc%")

sys.exit(0)
